module c-syntax

imports c-lexical
imports c-preprocessor

sorts TranslationUnit FunctionDefinition Declaration // ExternalDeclaration 

context-free syntax

  TranslationUnit.TranslationUnit = <
    <{ExternalDeclaration "\n\n"}+>
  >
   
  ExternalDeclaration = FunctionDefinition 
  ExternalDeclaration = Declaration 
  
  FunctionDefinition.FunDef = <
    <DeclarationSpecifier*> <Declarator> <Declaration*> 
    <CompoundStatement>
  > 
  
  Declaration.Decl = <
    <DeclarationSpecifier+> <{InitDeclarator ", "}*>;
  > 


sorts DeclarationSpecifier StorageClassSpecifier TypeSpecifier TypeQualifier
	  FunctionSpecifier AlignmentSpecifier

context-free syntax

  DeclarationSpecifier = StorageClassSpecifier 
  DeclarationSpecifier = TypeSpecifier 
  DeclarationSpecifier = TypeQualifier 
  DeclarationSpecifier = FunctionSpecifier
  DeclarationSpecifier = AlignmentSpecifier
  DeclarationSpecifier = StaticAssert
  
  StorageClassSpecifier.Auto     = <auto> 
  StorageClassSpecifier.Register = <register> 
  StorageClassSpecifier.Static   = <static> 
  StorageClassSpecifier.Extern   = <extern> 
  StorageClassSpecifier.Typedef  = <typedef> 
  StorageClassSpecifier.ThreadLocal = <_Thread_local>
  
  TypeSpecifier.Void      = <void> 
  TypeSpecifier.Char      = <char> 
  TypeSpecifier.Short     = <short> 
  TypeSpecifier.Int       = <int> 
  TypeSpecifier.Long      = <long> 
  TypeSpecifier.Float     = <float> 
  TypeSpecifier.Double    = <double> 
  TypeSpecifier.Signed    = <signed> 
  TypeSpecifier.Unsigned  = <unsigned> 
  TypeSpecifier.Bool      = <_Bool>
  TypeSpecifier.Complex   = <_Complex>
  TypeSpecifier.Imaginary = <_Imaginary>
  TypeSpecifier           = StructOrUnionSpecifier 
  TypeSpecifier           = EnumSpecifier 
  TypeSpecifier.TypedefName1 = <<TypeID>>
  
  TypeQualifier.Const     = <const> 
  TypeQualifier.Restrict  = <restrict>
  TypeQualifier.Volatile  = <volatile> 
  TypeQualifier.Atomic    = <_Atomic>
  
  FunctionSpecifier.Inline = <inline>
  FunctionSpecifier.NoReturn = <_Noreturn>
  
  AlignmentSpecifier.AlignasConstexpr = <_Alignas(<ConstExp>)>
  AlignmentSpecifier.AlignasType = <_Alignas(<DirectDeclarator>)>

sorts StructDeclarator-OPT
context-free syntax
  StructDeclarator-OPT                    = StructDeclarator
  StructDeclarator-OPT.NoStructDeclarator = <>

sorts StaticAssert StructOrUnionSpecifier StructOrUnion InitDeclarator StructDeclaration SpecifierQualifier
	  StructDeclarator EnumSpecifier

context-free syntax

  StaticAssert.StaticAssert = <_Static_assert(<ConstExp>, <STRING>)>
  
  StructOrUnionSpecifier.StructOrUnion = <
    <StructOrUnion> <TypeID-OPT> {
      <StructDeclaration+> 
    }
  > 
  
  StructOrUnionSpecifier.StructOrUnionDecl = <
    <StructOrUnion> <TypeID>
  > 
  
  StructOrUnion.Struct = <struct> 
  StructOrUnion.Union  = <union>
  
  InitDeclarator = Declarator 
  
  InitDeclarator.InitDecl = <
    <Declarator> = <Initializer>
  > 
  
  StructDeclaration.StructDecl = <
    <SpecifierQualifier+> <{StructDeclarator ","}+>;
  > 
  
  StructDeclaration.AnonSubStructOrUnion = <<StructOrUnionSpecifier>;>
  
  SpecifierQualifier = TypeSpecifier 
  SpecifierQualifier = TypeQualifier 
  
  StructDeclarator = Declarator 
  
  StructDeclarator.StructDeclor = <
    <StructDeclarator-OPT> : <ConstExp>
  > 
  
  EnumSpecifier.EnumSpec = <
    enum <TypeID-OPT> {
      <{Enumerator ", "}+> 
    }
  > 
  EnumSpecifier.EnumSpecDecl = <
    enum <TypeID>
  > 

sorts ParameterTypeList-OPT Pointer-OPT
context-free syntax

  ParameterTypeList-OPT                     = ParameterTypeList
  ParameterTypeList-OPT.NoParameterTypeList = <>

  Pointer-OPT           = Pointer
  Pointer-OPT.NoPointer = <>

sorts Enumerator Declarator DirectDeclarator ParameterTypeList ParameterDeclaration Initializer TypeName Pointer

context-free syntax

  Enumerator = ID 
  Enumerator.Enumerator = <
    <ID> = <Constant>
  > 
  
  Declarator.Declarator = <
    <Pointer-OPT> <DirectDeclarator>
  > 
  
  DirectDeclarator.IdDecl = ID
  DirectDeclarator.DeclBracket = <(<Declarator>)>
  DirectDeclarator.ArrayDecl = <<DirectDeclarator> [ ]>
  DirectDeclarator.ArrayDecl1 = <<DirectDeclarator> [<TypeQualifier+>]>
  DirectDeclarator.ArrayDecl2 = <<DirectDeclarator> [<TypeQualifier*> *]>
  DirectDeclarator.ArrayDeclLength = <<DirectDeclarator> [<AssignExp>]>
  DirectDeclarator.ArrayDeclLength1 = <<DirectDeclarator> [<TypeQualifier+> <AssignExp>]>
  DirectDeclarator.ArrayDeclLength2 = <<DirectDeclarator> [static <TypeQualifier*> <AssignExp>]>
  DirectDeclarator.ArrayDeclLength3 = <<DirectDeclarator> [<TypeQualifier+> static <AssignExp>]>
  DirectDeclarator.FunDeclTyped = <<DirectDeclarator>(<ParameterTypeList>)> 
  DirectDeclarator.IdListDecl = <(<ID*>)>
  
  ParameterTypeList.ParamList = <<{ParameterDeclaration ", "}*>>
  ParameterTypeList.ParamListVarArgs = <<{ParameterDeclaration ", "}+> , ...> 
  ParameterDeclaration.ParamDecl1 = <<DeclarationSpecifier+> <Declarator>> 
  ParameterDeclaration.ParamDecl2 = <<DeclarationSpecifier+> <AbstractDeclarator-OPT>>

  Initializer = AssignExp 
  
  Initializer.Initializer = <
    { <{Initializer ", "}+> }
  > 
  Initializer.InitializerComma = <
    { <{Initializer ", "}+> , }
  > 
  
  TypeName.TypedefName2 = <
    <SpecifierQualifier+> <AbstractDeclarator-OPT>
  > 

  TypeName = TypeID 
  
  Pointer.Pointer = <<Pointer-OPT> *<TypeQualifier*>>

sorts AbstractDeclarator-OPT DirectAbstractDeclarator-OPT InitClause-OPT
context-free syntax
  AbstractDeclarator-OPT                      = AbstractDeclarator
  AbstractDeclarator-OPT.NoAbstractDeclarator = <>

  DirectAbstractDeclarator-OPT                            = DirectAbstractDeclarator
  DirectAbstractDeclarator-OPT.NoDirectAbstractDeclarator = <>

  InitClause-OPT = InitClause
  InitClause-OPT.NoInitClause = <>

sorts AbstractDeclarator DirectAbstractDeclarator Statement BlockItem CompoundStatement InitClause

context-free syntax

  AbstractDeclarator = Pointer 
  
  AbstractDeclarator.DirDecl = <
    <Pointer-OPT> <DirectAbstractDeclarator>
  > 

  DirectAbstractDeclarator.AbsDecl = <
    (<AbstractDeclarator>)
  > 
  DirectAbstractDeclarator.AArrayDecl = <
    <DirectAbstractDeclarator-OPT>[<ConstExp>]
  > 
  DirectAbstractDeclarator.AFunDecl = <
    <DirectAbstractDeclarator-OPT>(<ParameterTypeList-OPT>)
  > 
  
  Statement.Label   = <<ID> : <Statement>> 
  Statement.Case    = <case <ConstExp> : <Statement>> 
  Statement.Default = <default : <Statement>> 
  
  Statement.Exp = <<Exp>;> 
  Statement.Nop = <;> 
  
  Statement = CompoundStatement 
  
  BlockItem = Declaration
  BlockItem = Statement
  
  CompoundStatement.Compound = <
    { 
      <{BlockItem "\n"}*>
    }
  > 
  Statement.If = <
    if(<Exp>) 
      <Statement>
  >
  Statement.IfElse = <
    if(<Exp>) 
      <Statement> 
    else 
      <Statement>
  > 
  Statement.Switch = <
    switch(<Exp>) 
      <Statement>
  >
  Statement.While = <
    while(<Exp>) 
      <Statement>
  > 
  Statement.DoWhile = <
    do 
      <Statement> 
    while(<Exp>);
  > 
  Statement.For = <
    for(<InitClause-OPT>; <Exp-OPT>; <Exp-OPT>)
      <Statement>
  > 
  Statement.Goto = <
    goto <ID>;
  > 
  Statement.Continue = <continue ;> 
  Statement.Break    = <break ;> 
  Statement.Return   = <return <Exp-OPT>;>

  InitClause = Exp
  InitClause.ForInitDecl = <<DeclarationSpecifier+> <{InitDeclarator ", "}*>>

//context-free syntax
//
//  Start = Exp 

sorts Exp Exp-OPT EqNeqOp OrderOp ShiftOp MulDivOp
context-free syntax

  Exp-OPT       = Exp
  Exp-OPT.NoExp = <>

  Exp.Comma = <<Exp> , <Exp>> {left}
  
  Exp.Assign = <<Exp> <AssignOp> <Exp>> {right}
  Exp.Cond   = <<Exp> ? <Exp> : <Exp>> {right}
  
  Exp.LOr = <<Exp> || <Exp>> {left}
  Exp.LAnd = <<Exp> && <Exp>> {left}
  Exp.Ior = <<Exp> | <Exp>> {left}
  Exp.Eor = <<Exp> ^ <Exp>> {left}
  Exp.And = <<Exp> & <Exp>> {left}
  
  Exp.EqNeq = <<Exp> <EqNeqOp> <Exp>> {left}
  EqNeqOp.Eq = [==]
  EqNeqOp.Neq = <!=>
  Exp.Order = <<Exp> <OrderOp> <Exp>> {left}
  OrderOp.Lt = [<]
  OrderOp.Gt = [>]
  OrderOp.Leq = [<=]
  OrderOp.Geq = [>=]
  
  Exp.Shift = <<Exp> <ShiftOp> <Exp>> {left}
  ShiftOp.Lshift = [<<]
  ShiftOp.Rshift = [>>]
  
  Exp.Add = <<Exp> + <Exp>> {left}
  Exp.Sub = <<Exp> - <Exp>> {left}
  
  Exp.MulDiv = <<Exp> <MulDivOp> <Exp>> {left}
  MulDivOp.Mul = <*>
  MulDivOp.Div = </>

  Exp.Mod = <<Exp> % <Exp>> {left}
  
  Exp.Cast      = <(<TypeName>)<Exp>> 
  Exp.PreInc    = <++<Exp>> 
  Exp.PreDec    = [--[Exp]]
  Exp.UnOp      = <<UnaryOp> <Exp>>
  Exp.SizeofT   = <sizeof(<TypeName>)>
  Exp.AlignofT  = <_Alignof(<TypeName>)>
  Exp.Subscript = <<Exp>[<Exp>]> 
  Exp.Call      = <<Exp>(<{Exp ", "}*>)> 
  Exp.Proj      = <<Exp>.<ID>> 
  Exp.DerefProj = [[Exp] -> [ID]]
  Exp.PostInc   = <<Exp>++> 
  Exp.PostDec   = [[Exp]--]
  Exp.Var       = ID 
  Exp           = Constant 
  Exp.String    = STRING
  Exp.Null      = <NULL>
  Exp           = <(<Exp>)> {bracket}

sorts ConstExp AssignExp

context-free syntax

  ConstExp  = Exp 
  AssignExp = Exp 

context-free priorities

  ConstExp  = Exp  <0>. > Exp.Assign,
  AssignExp = Exp  <0>. > Exp.Comma

context-free priorities

  {Exp.Subscript
   Exp.Call
   Exp.Proj
   Exp.DerefProj
   Exp.PostInc
   Exp.PostDec
  } > {
   Exp.PreInc
   Exp.PreDec
   Exp.UnOp
   Exp.SizeofT
  } 
  > Exp.Cast 
  > {left :
   Exp.MulDiv
   Exp.Mod
  } > {left :
    Exp.Add
    Exp.Sub
  } > {left :
    Exp.Shift
  } > {left :
    Exp.Order
  } > {left :
    Exp.EqNeq
  } 
  > Exp.And 
  > Exp.Eor > Exp.Ior 
  > Exp.LAnd > Exp.LOr 
  > Exp.Cond 
  > Exp.Assign 
  > Exp.Comma

context-free priorities

  {Exp ","}+ = Exp  <0>. > Exp.Comma,
  {Exp ","}+ = {Exp ","}+ "," Exp  <2>. > Exp.Comma

context-free priorities

  Exp.Assign <0>. > {Exp.Cast
                     Exp.MulDiv
                     Exp.Mod
                     Exp.Add
                     Exp.Sub
                     Exp.Shift
                     Exp.Order
                     Exp.EqNeq
                     Exp.And
                     Exp.Eor
                     Exp.Ior
                     Exp.LAnd
                     Exp.LOr
                     Exp.Cond}

sorts AssignOp UnaryOp

context-free syntax

  AssignOp.AssignNorm = <=> 
  AssignOp.AssignMul = <*=> 
  AssignOp.AssignDiv = </=> 
  AssignOp.AssignMod = <%=> 
  AssignOp.AssignAdd = <+=> 
  AssignOp.AssignMin = <-=> 
  AssignOp.AssignLsh = [<<=]
  AssignOp.AssignRsh = [>>=] 
  AssignOp.AssignAnd = <&=> 
  AssignOp.AssignPow = <^=> 
  AssignOp.AssignOr = <|=> 

context-free syntax

  UnaryOp.Addr = <&> 
  UnaryOp.Deref = <*> 
  UnaryOp.Uplus = <+> 
  UnaryOp.Umin = <-> 
  UnaryOp.Tilde = <~> 
  UnaryOp.Not = <!>
  UnaryOp.Sizeof = <sizeof>
  UnaryOp.Alignof = <_Alignof>
   
lexical restrictions

  "+" -/- [\+]
  "-" -/- [\-]
  "&" -/- [\&]
  
template options
  ID = keyword {reject}
  TypeID = keyword {reject}
