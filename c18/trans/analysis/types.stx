module analysis/types

imports
  signatures/c18-sig
  signatures/desugar/expressions-sig
  
  analysis/declarations

//signature // to also consider qualifiers 
// sorts TYPE TSPEC TQUAL constructors
// INT : TSPEC
// CONST : TQUAL
// TYPE : list(TQUAL) * TSPEC -> TYPE

signature
  sorts TYPE constructors
  VOID 					: TYPE
  CHAR 					: TYPE
  SCHAR 				: TYPE
  UCHAR 				: TYPE
  SHORT 				: TYPE
  USHORT 				: TYPE
  INT 					: TYPE
  UINT 					: TYPE
  LONG 					: TYPE
  ULONG 				: TYPE
  LONGLONG 				: TYPE
  ULONGLONG 			: TYPE
  FLOAT 				: TYPE
  DOUBLE 				: TYPE
  LONGDOUBLE 			: TYPE
  BOOL 					: TYPE
  COMPLEX 				: TYPE -> TYPE
  IMAGINARY				: TYPE -> TYPE
  // TODO atomic
  STRUCT				: scope * STRING -> TYPE
  UNION					: list(TYPE) -> TYPE
  ENUM					: TYPE
  // TODO typedef names

  // TODO type qualifiers

rules // typing  rules
	// TODO Find a way to accept specifiers in arbitrary order
  typeOfType : scope * list(TypeSpecifier) -> TYPE

  // void
  typeOfType(_, e@[Void()]) = T@VOID() :- @e.type := T.

  // char
  typeOfType(_, e@[Char()]) = T@CHAR() :- @e.type := T.

  // signed char
  typeOfType(_, e@[Signed(), Char()]) = T@SCHAR() :- @e.type := T.

  // unsigned char
  typeOfType(_, e@[Unsigned(), Char()]) = T@UCHAR() :- @e.type := T.

  // short
  typeOfType(_, e@[Short()]) = T@SHORT() :- @e.type := T.
  typeOfType(_, e@[Signed(), Short()]) = T@SHORT() :- @e.type := T.
  typeOfType(_, e@[Short(), Int()]) = T@SHORT() :- @e.type := T.
  typeOfType(_, e@[Signed(), Short(), Int()]) = T@SHORT() :- @e.type := T.

  // unsigned short
  typeOfType(_, e@[Unsigned(), Short()]) = T@USHORT() :- @e.type := T.
  typeOfType(_, e@[Unsigned(), Short(), Int()]) = T@USHORT() :- @e.type := T.

  // int
  typeOfType(_, e@[Int()]) = T@INT() :- @e.type := T.
  typeOfType(_, e@[Signed()]) = T@INT() :- @e.type := T.
  typeOfType(_, e@[Signed(), Int()]) = T@INT() :- @e.type := T.

  // unsigned int
  typeOfType(_, e@[Unsigned()]) = T@UINT() :- @e.type := T.
  typeOfType(_, e@[Unsigned(), Int()]) = T@UINT() :- @e.type := T.

  // long
  typeOfType(_, e@[Long()]) = T@LONG() :- @e.type := T.
  typeOfType(_, e@[Signed(), Long()]) = T@LONG() :- @e.type := T.
  typeOfType(_, e@[Long(), Int()]) = T@LONG() :- @e.type := T.
  typeOfType(_, e@[Signed(), Long(), Int()]) = T@LONG() :- @e.type := T.

  // unsigned long
  typeOfType(_, e@[Unsigned(), Long()]) = T@ULONG() :- @e.type := T.
  typeOfType(_, e@[Unsigned(), Long(), Int()]) = T@ULONG() :- @e.type := T.

  // long long
  typeOfType(_, e@[Long(), Long()]) = T@LONGLONG() :- @e.type := T.
  typeOfType(_, e@[Signed(), Long(), Long()]) = T@LONGLONG() :- @e.type := T.
  typeOfType(_, e@[Long(), Long(), Int()]) = T@LONGLONG() :- @e.type := T.
  typeOfType(_, e@[Signed(), Long(), Long(), Int()]) = T@LONGLONG() :- @e.type := T.

  // unsigned long long
  typeOfType(_, e@[Unsigned(), Long(), Long()]) = T@ULONGLONG() :- @e.type := T.
  typeOfType(_, e@[Unsigned(), Long(), Long(), Int()]) = T@ULONGLONG() :- @e.type := T.

  // float
  typeOfType(_, e@[Float()]) = T@FLOAT() :- @e.type := T.

  // double
  typeOfType(_, e@[Double()]) = T@DOUBLE() :- @e.type := T.

  // long double
  typeOfType(_, e@[Long(), Double()]) = T@LONGDOUBLE() :- @e.type := T.

  // _Bool
  typeOfType(_, e@[Bool()]) = T@BOOL() :- @e.type := T.

  // _Complex
  typeOfType(_, e@[t1, Complex()]) = T@COMPLEX(SUB) :-
	complexSubtype([t1]) == SUB,
	@e.type := T.
  typeOfType(_, e@[t1, t2, Complex()]) = T@COMPLEX(SUB) :-
	complexSubtype([t1, t2]) == SUB,
	@e.type := T.

  // _ Imaginary
  typeOfType(_, e@[t1, Imaginary()]) = T@IMAGINARY(SUB) :-
	complexSubtype([t1]) == SUB,
	@e.type := T.
  typeOfType(_, e@[t1, t2, Imaginary()]) = T@IMAGINARY(SUB) :-
	complexSubtype([t1, t2]) == SUB,
	@e.type := T.

  // TODO _Atomic
  // TODO struct
  // TODO union
  // TODO enum

  // typedef names
  typeOfType(s, e@[TypedefName1(x)]) = typeOfTypedef(s, x). // TODO perform lookup for 'x'
rules // type helpers
	// Only permit float, double and long double as complex types
	complexSubtype : list(TypeSpecifier) -> TYPE
	complexSubtype([Float(), _]) = FLOAT().
	complexSubtype([Double(), _]) = DOUBLE().
	complexSubtype([Long(), Double(), _]) = LONGDOUBLE().
	
	
rules intType : TYPE

  intType(BOOL()).
  intType(SCHAR()).
  intType(CHAR()).
  intType(SHORT()).
  intType(INT()).
  intType(LONG()).
  intType(LONGLONG()).
  intType(T) :- {ST}
    signEquiv(ST, T).

rules numberType : TYPE
  numberType(FLOAT()).
  numberType(DOUBLE()).
  numberType(LONGDOUBLE()).
  numberType(COMPLEX(_)).
  numberType(IMAGINARY(_)).
  numberType(T) :-
    intType(T).
	
rules signEquiv : TYPE * TYPE

  signEquiv(SCHAR(), UCHAR()).
  signEquiv(SHORT(), USHORT()).
  signEquiv(INT(), UINT()).
  signEquiv(LONG(), ULONG()).
  signEquiv(LONGLONG(), ULONGLONG()).
	
rules intConvRank : TYPE -> int

  // ยง 6.3.1.1
  // every type has an integer conversion rank, no two types shall have the same rank, the rank of
  // a signed integer shall be greater than the rank of any other with less precision,
  // long long > long > int > short > signed char
  intConvRank(SCHAR()) = 10.
  intConvRank(SHORT()) = 20.
  intConvRank(INT()) = 30.
  intConvRank(LONG()) = 40.
  intConvRank(LONGLONG()) = 50.
  
  // The rank of any unsigned integer type shall equal the rank of the corresponding signed integer
  // ... *however*: If an int can represent all values of the original type (as restricted by the 
  // width, for a bit-field), the value is converted to an int; otherwise, it is converted to an 
  // unsigned int.
  // We don't know if it is going to fit so we rank unsigned types 1 above signed types
  intConvRank(T) = R :- {ST Sr}
    signEquiv(ST, T),
    intConvRank(ST) == Sr,
    R == #(Sr + 1).
    
    
  // The rank of any standard integer type shall be greater than the rank of any extended integer
  // type with the same width, the rank of any extended signed integer type relative to another 
  // extended signed integer type with the same precision is implementation-defined, but still 
  // subject to the other rules for determining the integer conversion rank.
  // ... we don't have those I think
  
  // The rank of char shall equal the rank of signed char and unsigned char.
  intConvRank(CHAR()) = intConvRank(SCHAR()).
  
  // The rank of _Bool shall be less than the rank of all other standard integer types.
  intConvRank(BOOL()) = 5.
  
  // The rank of any enumerated type shall equal the rank of the compatible integer type 
  // (see 6.7.2.2).
  // fix it to int for now
  intConvRank(ENUM()) = intConvRank(INT()).
  
rules signed : TYPE

  signed(SCHAR()).
  signed(SHORT()).
  signed(INT()).
  signed(LONG()).
  signed(LONGLONG()).
	
rules lub : TYPE * TYPE -> TYPE

  lub(Ta, Tb) = T :- {Ra Rb}
    intConvRank(Ta) == Ra,
    intConvRank(Tb) == Rb,
    Ra #=< Rb,
    T == Tb.
