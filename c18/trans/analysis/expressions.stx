module analysis/expressions

imports
  analysis/declarations
  analysis/types

rules
  typeOfExp : scope * Exp -> TYPE
  typeOfExps maps typeOfExp(*, list(*)) = list(*)

  // TODO: do something with U/L/LL/UL/LU/LLU/ULL suffixes
  typeOfExp(_, Constant2Exp(IntegerConstant2Constant(_))) = INT().
  typeOfExp(_, Constant2Exp(CharacterConstant2Constant(_))) = INT().
  typeOfExp(_, Constant2Exp(FloatingConstant2Constant(_))) = FLOAT().
  typeOfExp(_, String(_)) = POINTER(CHAR()).

  typeOfExp(s, UnOp(op, e)) = T :- {Te}
    typeOfExp(s, e) == Te,
    typeOfUnExp(op, Te) == T.

  typeOfExp(s, Comma(e1, e2)) = typeOfExp(s, e2) :-
	typeOfExp(s, e1) == _.
  
  typeOfExp(s, Assign(e1, AssignAdd(), e2)) = T :- {T2}
    typeOfExp(s, e1) == T,
    typeOfExp(s, e2) == T2,
    typeOfAddSub(T, T2) == T.
    
  typeOfExp(s, Assign(e1, AssignMin(), e2)) = T :- {T2}
    typeOfExp(s, e1) == T,
    typeOfExp(s, e2) == T2,
    typeOfAddSub(T, T2) == T.
  
  typeOfExp(s, Assign(e1, op, e2)) = T :- {T2}
    typeOfExp(s, e1) == T,
    typeOfExp(s, e2) == T2,
    lub(T, T2) == T.
    
  typeOfExp(s, LAnd(e1, e2)) = INT() :-
    scalarType(typeOfExp(s, e1)),
    scalarType(typeOfExp(s, e2)).
    
  typeOfExp(s, Ior(e1, e2)) = T :- {T1 T2}
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    numberRules(T1, T2) == T.
    
  typeOfExp(s, Eor(e1, e2)) = T :- {T1 T2}
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    numberRules(T1, T2) == T.
    
  typeOfExp(s, And(e1, e2)) = T :- {T1 T2}
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    numberRules(T1, T2) == T.
    
  typeOfExp(s, EqNeq(e1, op, e2)) = INT() :-
    scalarType(typeOfExp(s, e1)),
    scalarType(typeOfExp(s, e2)).
    
  typeOfExp(s, Order(e1, op, e2)) = INT() :-
    intType(typeOfExp(s, e1)),
    intType(typeOfExp(s, e2)).
    
  typeOfExp(s, Shift(e1, op, e2)) = T :- {T1 T2}
    typeOfExp(s, e1) == T1,
    numberRules(T1, INT()) == T,
    intType(typeOfExp(s, e2)).
    
  typeOfExp(s, AddSub(e1, op, e2)) = T :- {T1 T2}
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    typeOfAddSub(T1, T2) == T.
    
  typeOfExp(s, MulDivMod(e1, op, e2)) = T :- {T1 T2}
    typeOfExp(s, e1) == T1,
    typeOfExp(s, e2) == T2,
    numberRules(T1, T2) == T.
    
  typeOfExp(s, SizeofT(_)) = ULONGLONG().
  typeOfExp(s, AlignofT(_)) = ULONGLONG().

  typeOfExp(s, Null()) = POINTER(VOID()).

//  TODO: improve/desugar cast syntax?    
  typeOfExp(s, Cast(TypedefName2(ts, NoAbstractDeclarator()), e)) =
    typeOfType(s, declSpecsToTypeSpecs(specQualsToDeclSpecs(ts))).
  typeOfExp(s, Cast(TypedefName2(ts, AbstractDeclarator2AbstractDeclarator-OPT(a)), e)) =
    typeOfAbsDecl(s, typeOfType(s, declSpecsToTypeSpecs(specQualsToDeclSpecs(ts))), a).

  typeOfExp(s, Call(Var(id), args)) = Tr :- {Tf Ta Ta'}
    typeOfFun(s, id) == Tf,
    typeOfExps(s, args) == Ta',
    funArgsOk(Tf, Ta'),
    Tr == typeOfFunCall(Tf).

  typeOfExp(s, Call(callee, args)) = Tr :- {Tf Ta Ta'}
    typeOfExp(s, callee) == Tf, // i.e. int -> int
    typeOfExps(s, args) == Ta',
    funArgsOk(Tf, Ta'),
    Tr == typeOfFunCall(Tf).
    
  typeOfExp(s, Proj(e, var)) = T :- {TS}
     typeOfExp(s, e) == TS,
     typeOfSouMem(s, TS, var) == T.

  typeOfExp(s, Var(id)) = typeOfVar(s, id).

rules
  typeOfExpOpt : scope * Exp-OPT -> TYPE
  typeOfExpOpt(_, NoExp()) = _.
  typeOfExpOpt(s, Exp2Exp-OPT(e)) = typeOfExp(s, e).
  
  
rules funArgsOk : TYPE * list(TYPE)

  funArgsOk(FUN(Tas, _), Tps) :-
    lubs(Tas, Tps) == Tas | error $[Function expects types [Tas], not [Tps]].
    
  funArgsOk(VARFUN([], _), _).
  funArgsOk(VARFUN([Ta | Tas], Tr), [Tp | Tps]) :-
    lub(Ta, Tp) == Ta,
    funArgsOk(VARFUN(Tas, Tr), Tps).
  
  
rules typeOfFunCall : TYPE -> TYPE

  typeOfFunCall(FUN(_, T)) = T.
  typeOfFunCall(VARFUN(_, T)) = T.


rules typeOfSouMem : scope * TYPE * ID -> TYPE

  typeOfSouMem(_, STRUCT(s_struct), var) = typeOfMember(s_struct, var).

  typeOfSouMem(s, STRUCT_REF(s_id), var) =
      typeOfSouMem(s, typeOfStructOrUnion(s, s_id), var).

  typeOfSouMem(_, UNION(s_union), var) = typeOfMember(s_union, var).

  typeOfSouMem(s, UNION_REF(u_id), var) =
      typeOfSouMem(s, typeOfStructOrUnion(s, u_id), var).


rules typeOfAddSub : TYPE * TYPE -> TYPE
  
  typeOfAddSub(POINTER(T1), T2) = POINTER(T1) :- intType(T2).
  typeOfAddSub(T1, POINTER(T2)) = POINTER(T2) :- intType(T1).
  typeOfAddSub(T1, T2) = numberRules(T1, T2).

rules
  typeOfUnExp : UnaryOp * TYPE -> TYPE
//  typeOfUnExp(UnaryOp(), T). TODO
  typeOfUnExp(Sizeof(), _) = ULONGLONG. // actually size_t
  typeOfUnExp(Alignof(), _) = ULONGLONG. // actually size_t
  typeOfUnExp(Deref(), POINTER(T)) = T.
  typeOfUnExp(Addr(), T) = POINTER(T).
  typeOfUnExp(Not(), _) = INT().
    

rules
  intRules : TYPE * TYPE -> TYPE
  intRules(T1, T2) = T :-
    lub(T1, T2) == T,
    intType(T).

rules
  numberRules : TYPE * TYPE -> TYPE
  numberRules(T1, T2) = intRules(T1, T2).
  numberRules(T, T) = T :-
    numberType(T).
