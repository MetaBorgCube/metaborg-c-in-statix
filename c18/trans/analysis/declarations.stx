module analysis/declarations

imports
  signatures/c-syntax-sig

  analysis/expressions
  analysis/statements
  analysis/types

signature
  namespaces
    Var      : ID
    Function : ID
    Typedef  : ID

    Return   :

    Label    : ID

  relations
    type : occurrence -> TYPE

  name-resolution labels P
    resolve Var filter P* min $ < P
    resolve Function min $ < P
    resolve Typedef filter P* min $ < P

    resolve Return

    resolve Label // TODO should always be in top-level scope?

rules
  translationUnitOk : TranslationUnit
  translationUnitOk(TranslationUnit(extDecls)) :- {s}
    new s,
    extDeclListOk(s, extDecls).

  extDeclOk : scope * ExternalDeclaration
  extDeclListOk maps extDeclOk(*, list(*))
  extDeclOk(s, FunctionDefinition2ExternalDeclaration(funDef)) :-
    funDefOk(s, funDef).
  extDeclOk(s, Declaration2ExternalDeclaration(decl)) :-
    declOk(s, decl).

  // FunDef : list(DeclarationSpecifier) * Declarator * list(Declaration) * CompoundStatement -> FunctionDefinition
  funDefOk : scope * FunctionDefinition
  funDefOk(s, FunDef(declSpecs, declarator, decls, compStmt)) :- {s_fun id T}
    declSpecsToType(s, declSpecs) == T,
    declrtrOk(s, declarator) == id,
    new s_fun,
    s_fun -P-> s,
    s_fun -> Return{} with type T,
    declsOk(s_fun, decls),
    compStmtOk(s_fun, compStmt),
    declareFun(s, id, T).
    
  initClauseOk : scope * InitClause
  initClauseOk(s, Exp2InitClause(e)) :-
    typeOfExp(s, e) == _. // TODO more constraints on this?
  initClauseOk(s, ForInitDecl(declSpecs, initDeclrtrs)) :- {t T ids}
    declSpecsToType(s, declSpecs) == T, // specified type
    initDeclrtrsOk(s, T, initDeclrtrs) == ids,
    declareVars(s, ids, T).
  
  initDeclrtrOk : scope * TYPE * InitDeclarator -> ID
  initDeclrtrsOk maps initDeclrtrOk(*, *, list(*)) = list(*)
  // TODO Instead of AssignExp, a list of AssignExps can also occur (array initializer)
  // TODO When assigning, types do not have to match exactly. For example, assignments between int types are (mostly) allowed.
  initDeclrtrOk(s, T, InitDecl(decl, AssignExp2Initializer(Exp2AssignExp(e)))) = id :- {T'}
    declrtrOk(s, decl) == id, // declared type
    typeOfExp(s, e) == T', // expression type
    T == T'.
  initDeclrtrOk(s, _, Declarator2InitDeclarator(decl)) = id :-
    declrtrOk(s, decl) == id.

  declrtrOk : scope * Declarator -> ID
  // TODO Handle A LOT of other cases
  // Probably pass type from above and declare the variable in this rule
  declrtrOk(s, Declarator(NoPointer(), IdDecl(id))) = id.

  // Decl : list(DeclarationSpecifier) * list(InitDeclarator) -> Declaration
  declOk : scope * Declaration
  declsOk maps declOk(*, list(*))
  declOk(s, Decl(declSpecs, initDeclrtrs)) :- {ids T}
    declSpecsToType(s, declSpecs) == T, // Assumption: there are *only* type specifiers in here
    initDeclrtrsOk(s, T, initDeclrtrs) == ids,
    declareVars(s, ids, T).

  declSpecsToType : scope * list(DeclarationSpecifier) -> TYPE
  declSpecsToType(s, specs) = typeOfType(s, declSpecsToTypeSpecs(specs)).

  declSpecToTypeSpec : DeclarationSpecifier -> TypeSpecifier
  declSpecsToTypeSpecs maps declSpecToTypeSpec(list(*)) = list(*)
  declSpecToTypeSpec(TypeSpecifier2DeclarationSpecifier(ts)) = ts.

rules // declaring / resolving variables and functions
  declareVar : scope * ID * TYPE
  declareVars maps declareVar(*, list(*), *)
  declareVar(s, id, T) :-
    s -> Var{id} with type T,
    type of Var{id} in s |-> [(_, (Var{id}, _))] | error $[Variable [id] already defined].

  typeOfVar : scope * ID -> TYPE
  typeOfVar(s, id) = T :- {id'}
    @id.ref := id',
    type of Var{id} in s |-> [(_, (Var{id'}, T))] | error $[Variable [id] not defined].

  declareFun : scope * ID * TYPE
  declareFun(s, id, T) :-
    s -> Function{id} with type T,
    type of Function{id} in s |-> [(_, (Function{id}, _))] | error $[Function [id] already defined].

  typeOfFun : scope * ID -> TYPE
  typeOfFun(s, id) = T :- {id'}
    @id.ref := id',
    type of Function{id} in s |-> [(_, (Function{id'}, T))] | error $[Function [id] not defined].

  declareTypedef : scope * ID * TYPE
  declareTypedef(s, id, T) :-
    s -> Typedef{id} with type T,
    type of Typedef{id} in s |-> [(_, (Typedef{id}, _))] | error $[Type [id] already defined].

  typeOfTypedef : scope * ID -> TYPE
  typeOfTypedef(s, id) = T :- {id'}
    @id.ref := id',
    type of Typedef{id} in s |-> [(_, (Typedef{id'}, T))] | error $[Type [id] not defined].
