module desugar

imports
  signatures/c-syntax-sig
  signatures/c-lexical-sig
  desugar/decl-specs
  
  libstratego-lib
  
strategies
  
  decl-to-fundef(|ds, ss) = ?Decl(t, [dt]); !FunDef(t, dt, ds, ss)
  decl-to-paramdecl: Decl(t, [dt]) -> ParamDecl1(t, dt)
  decl-to-paramdecl2: Decl(t, _) -> ParamDecl2(t, NoAbstractDeclarator())
  
strategies

  gen-unidecl(|t) = ?a; !Decl(t, [a])
    
rules

  desugar-all = topdown(try(desugar)); 
    sort-decl-spec-all
  
  desugar: Subscript(a, b) -> UnOp(Deref(), AddSub(a, Add(), b))
  desugar: DerefProj(e, i) -> Proj(UnOp(Deref(), e), i)
  
  desugar: While(c, s) -> For(NoInitClause(), c, NoExp(), s)
  desugar: If(c, s) -> IfElse(c, s, Nop())
  desugar: For(ForInitDecl(ds, i), c, s, ss) -> Compound([Decl(ds, i), For(NoInitClause(), c, s, ss)])
  
  desugar: PreInc(e) -> Assign(e, AssignAdd(), DecInt("1"))
  desugar: PreDec(e) -> Assign(e, AssignMin(), DecInt("1"))
  
  desugar: PostInc(e) -> AddSub(PreInc(e), Sub(), DecInt("1"))
  desugar: PostDec(e) -> AddSub(PreDec(e), Add(), DecInt("1"))
  
  desugar: LOr(a, b) -> UnOp(Not(), LAnd(UnOp(Not(), a), UnOp(Not(), b)))

  desugar: InitializerComma(is) -> Initializer(is)

  desugar: ArrayDecl1(dd, _) -> ArrayDecl(dd)
  desugar: ArrayDecl2(dd, _) -> ArrayDecl(dd)
  desugar: ArrayDeclLength1(dd, _, e) -> ArrayDeclLength(dd, e)
  desugar: ArrayDeclLength2(dd, _, e) -> ArrayDeclLength(dd, e)
  desugar: ArrayDeclLength3(dd, _, e) -> ArrayDeclLength(dd, e)

rules

  desugar-pointers-all = bottomup(try(desugar-pointers))

  // Regular variable declarations (int *a, b;)
  desugar-pointers: Decl(t, []) -> Decl(t, []) 
  desugar-pointers: Decl(t, dt) -> <map(gen-unidecl(|t))> dt
  // Named parameters (int *a)
  desugar-pointers: ParamDecl1(t, dt) -> 
      <decl-to-paramdecl> <gen-unidecl(|t)> dt
  // Anonymous parameters, nothing special (int) 
  desugar-pointers: ParamDecl2(t, NoAbstractDeclarator()) -> 
      <decl-to-paramdecl2> <gen-unidecl(|t)> Declarator(NoPointer(), IdDecl("dummy"))
  // Anonymous parameters, with pointers (int *)
  desugar-pointers: ParamDecl2(t, [p@Pointer(_, _)]) -> 
      <decl-to-paramdecl2> <gen-unidecl(|t)> Declarator([p], IdDecl("dummy"))
  // Function definition (return type only, e.g. int *__errno_location(void))
  desugar-pointers: FunDef(t, dt, ds, ss) -> 
      <decl-to-fundef(|ds, ss)> <gen-unidecl(|t)> dt

rules

  collapse-decls-all = topdown(try(collapse-decls))

  collapse-decls: TranslationUnit(ds) -> TranslationUnit(<flatten-list> ds)
  collapse-decls: FunDef(ds, d, vds, ss) -> FunDef(ds, d, <flatten-list> vds, ss)
  collapse-decls: Compound(ds) -> Compound(<flatten-list> ds)
